Create Two Files Here

Client.c
#include <stdio.h>
#include <stdlib.h>
#include <sys/shm.h>
#include <sys/ipc.h>

#define MAXSIZE 27

int main() {
    int shmid;
    char *shm;
    key_t key = 1;

    // Access the shared memory
    if ((shmid = shmget(key, MAXSIZE, 0666)) < 0) {
        perror("shmget");
        exit(1);
    }

    // Attach to the shared memory
    if ((shm = shmat(shmid, NULL, 0)) == (char *) -1) {
        perror("shmat");
        exit(1);
    }

    printf("Client: Reading data from shared memory:\n");

    // Print data ('a' to 'z')
    for (char *s = shm; *s != '\0'; s++) {
        printf("%c ", *s);
    }

    // Signal to server that client is done by setting first character to '*'
    *shm = '*';

    printf("\nClient: Data read complete. Terminating.\n");

    // Detach from shared memory
    shmdt(shm);

    return 0;
}

/*
shaunty17@DESKTOP-MSSPH5A:/mnt/d/Shounak/New/Assignment_7/Assignment_7_b$ gcc -o client client.c
shaunty17@DESKTOP-MSSPH5A:/mnt/d/Shounak/New/Assignment_7/Assignment_7_b$ ./client
Client: Reading data from shared memory:
a b c d e f g h i j k l m n o p q r s t u v w x y z
Client: Data read complete. Terminating.
*/


Server.c
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>  // Include this header for sleep()

#define MAXSIZE 27

int main() {
    int shmid;
    char *shm;
    key_t key = 1;

    // Create shared memory segment
    if ((shmid = shmget(key, MAXSIZE, IPC_CREAT | 0666)) < 0) {
        perror("shmget");
        exit(1);
    }

    // Attach to the shared memory
    if ((shm = shmat(shmid, NULL, 0)) == (char *) -1) {
        perror("shmat");
        exit(1);
    }

    // Write data ('a' to 'z') to shared memory
    for (char c = 'a'; c <= 'z'; c++) {
        *shm++ = c;
    }

    printf("Server: Data written to shared memory. Waiting for client...\n");

    // Wait for the client to finish reading
    while (*shm != '*') {
        sleep(1);  // sleep for 1 second
    }

    printf("Server: Client finished reading, terminating.\n");

    // Detach and clean up
    shmdt(shm);
    shmctl(shmid, IPC_RMID, NULL);

    return 0;
}

/*
shaunty17@DESKTOP-MSSPH5A:/mnt/d/Shounak/New/Assignment_7/Assignment_7_b$ gcc -o server server.c
shaunty17@DESKTOP-MSSPH5A:/mnt/d/Shounak/New/Assignment_7/Assignment_7_b$ ./server
Server: Data written to shared memory. Waiting for client...
*/